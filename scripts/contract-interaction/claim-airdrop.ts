import { program } from "commander";
import fs from "fs";
const privateKeyToAddress =
  require("@celo/utils/lib/address").privateKeyToAddress;
require("dotenv").config();

const Web3 = require("web3");
const ContractKit = require("@celo/contractkit");

const web3 = new Web3("https://alfajores-forno.celo-testnet.org");
const kit = ContractKit.newKitFromWeb3(web3);

const Airdrop = require("../../build/contracts/Airdrop.json");

// "generated-merkle-root.json" should have been generated by the generate-merkle-root file under /scripts
program
  .requiredOption(
    "-i, --input <path>",
    "input JSON file location containing generated merkle root, addresses and proofs."
  )
  .option("-a --address", "single address to claim airdrop");

program.parse(process.argv);

const singleAddress = program.args[0];

const json = JSON.parse(fs.readFileSync(program.input, { encoding: "utf8" }));

if (typeof json !== "object") throw new Error("Invalid JSON");

async function beginAirdrop() {
  try {
    const networkId = await web3.eth.net.getId();
    const deployedNetwork = Airdrop.networks[networkId];

    let contractInstance = new web3.eth.Contract(
      Airdrop.abi,
      deployedNetwork && deployedNetwork.address
    );

    singleAddress
      ? claimErc20ForAddress(contractInstance, singleAddress)
      : claimAllErc20(contractInstance);
  } catch (error) {
    console.log(error);
  }
}

async function claimAllErc20(contractInstance) {
  try {
    kit.connection.addAccount(process.env.PRIVATE_KEY);
    const contractCreaterAddress = privateKeyToAddress(process.env.PRIVATE_KEY);

    for (let address of Object.keys(json.claims)) {
      try {
        const addressClaimDetails = json.claims[address];

        let txObject = await contractInstance.methods.claim(
          addressClaimDetails.index,
          address,
          addressClaimDetails.amount,
          addressClaimDetails.proof
        );

        let tx = await kit.sendTransactionObject(txObject, {
          from: contractCreaterAddress,
        });

        let receipt = await tx.waitReceipt();
        console.log(receipt);
      } catch (error) {
        console.log(error);
      }
    }
  } catch (error) {
    console.log(error);
  }
}

async function claimErc20ForAddress(contractInstance, address) {
  try {
    kit.connection.addAccount(process.env.PRIVATE_KEY);
    const contractCreaterAddress = privateKeyToAddress(process.env.PRIVATE_KEY);

    console.log(address);

    const addressClaimDetails = json.claims[address];

    let txObject = await contractInstance.methods.claim(
      addressClaimDetails.index,
      address,
      addressClaimDetails.amount,
      addressClaimDetails.proof
    );

    let tx = await kit.sendTransactionObject(txObject, {
      from: contractCreaterAddress,
    });

    let receipt = await tx.waitReceipt();
    console.log(receipt);
  } catch (error) {
    console.log(error);
  }
}

beginAirdrop();
